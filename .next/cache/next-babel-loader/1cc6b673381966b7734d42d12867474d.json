{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport const useDarkMode = () => {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(\"light\");\n  const {\n    0: componentMounted,\n    1: setComponentMounted\n  } = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setMode(\"dark\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches && !localTheme ? setMode(\"dark\") : localTheme ? setTheme(localTheme) : setMode(\"light\");\n    setComponentMounted(true);\n  }, []);\n  return [theme, toggleTheme, componentMounted];\n};","map":{"version":3,"sources":["C:/users/ian.kimble/Documents/Greez_DID/practice21/btp/client/darkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","toggleTheme","localTheme","getItem","matchMedia","matches"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM;AAAA,OAACI,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CL,QAAQ,CAAC,KAAD,CAAxD;;AAEA,QAAMM,OAAO,GAAIC,IAAD,IAAU;AACxBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,WAAW,GAAG,MAAM;AACxB,QAAIT,KAAK,KAAK,OAAd,EAAuB;AACrBI,MAAAA,OAAO,CAAC,MAAD,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,CAAC,OAAD,CAAP;AACD;AACF,GAND;;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAL,IAAAA,MAAM,CAACM,UAAP,IACAN,MAAM,CAACM,UAAP,CAAkB,8BAAlB,EAAkDC,OADlD,IAEA,CAACH,UAFD,GAGIN,OAAO,CAAC,MAAD,CAHX,GAIIM,UAAU,GACVT,QAAQ,CAACS,UAAD,CADE,GAEVN,OAAO,CAAC,OAAD,CANX;AAOAD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO,CAACH,KAAD,EAAQS,WAAR,EAAqBP,gBAArB,CAAP;AACD,CA9BM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const useDarkMode = () => {\r\n  const [theme, setTheme] = useState(\"light\");\r\n  const [componentMounted, setComponentMounted] = useState(false);\r\n\r\n  const setMode = (mode) => {\r\n    window.localStorage.setItem(\"theme\", mode);\r\n    setTheme(mode);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === \"light\") {\r\n      setMode(\"dark\");\r\n    } else {\r\n      setMode(\"light\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const localTheme = window.localStorage.getItem(\"theme\");\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches &&\r\n    !localTheme\r\n      ? setMode(\"dark\")\r\n      : localTheme\r\n      ? setTheme(localTheme)\r\n      : setMode(\"light\");\r\n    setComponentMounted(true);\r\n  }, []);\r\n\r\n  return [theme, toggleTheme, componentMounted];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}