{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ian.Kimble\\\\Documents\\\\Greez_DID\\\\practice21\\\\btp\\\\client\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport App from \"next/app\";\nimport Layout from \"../components/Layout\";\nimport { ThemeProvider } from \"styled-components\";\nimport { lightTheme, darkTheme } from \"../styles/theme\";\nimport { Button } from \"react-bootstrap\";\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    const {\n      0: theme,\n      1: setTheme\n    } = useState(\"light\");\n\n    const toggleTheme = () => {\n      if (theme === \"light\") {\n        setTheme(\"dark\");\n      } else {\n        setTheme(\"light\");\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: lightTheme === \"light\" ? lightTheme : darkTheme,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: style.darkModeBtn,\n          onClick: toggleTheme,\n          children: [/*#__PURE__*/_jsxDEV(FaRegMoon, {\n            style: {\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), \"Dark Mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Layout, {\n          children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Ian.Kimble/Documents/Greez_DID/practice21/btp/client/pages/_app.js"],"names":["React","useState","App","Layout","ThemeProvider","lightTheme","darkTheme","Button","MyApp","render","Component","pageProps","props","theme","setTheme","toggleTheme","style","darkModeBtn","marginRight"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,iBAAtC;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AACtBO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2B,KAAKC,KAAtC;AAEA,UAAM;AAAA,SAACC,KAAD;AAAA,SAAQC;AAAR,QAAoBb,QAAQ,CAAC,OAAD,CAAlC;;AAEA,UAAMc,WAAW,GAAG,MAAM;AACxB,UAAIF,KAAK,KAAK,OAAd,EAAuB;AACrBC,QAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,KAND;;AAQA,wBACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAET,UAAU,KAAK,OAAf,GAAyBA,UAAzB,GAAsCC,SAA5D;AAAA,6BACE;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAEU,KAAK,CAACC,WAAzB;AAAsC,UAAA,OAAO,EAAEF,WAA/C;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAE;AAAEG,cAAAA,WAAW,EAAE;AAAf;AAAlB;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,MAAD;AAAA,iCACE,QAAC,SAAD,oBAAeP,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA3BqB;;AA8BxB,eAAeH,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport App from \"next/app\";\nimport Layout from \"../components/Layout\";\nimport { ThemeProvider } from \"styled-components\";\nimport { lightTheme, darkTheme } from \"../styles/theme\";\nimport { Button } from \"react-bootstrap\";\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props;\n\n    const [theme, setTheme] = useState(\"light\");\n\n    const toggleTheme = () => {\n      if (theme === \"light\") {\n        setTheme(\"dark\");\n      } else {\n        setTheme(\"light\");\n      }\n    };\n\n    return (\n      <ThemeProvider theme={lightTheme === \"light\" ? lightTheme : darkTheme}>\n        <>\n          <Button className={style.darkModeBtn} onClick={toggleTheme}>\n            <FaRegMoon style={{ marginRight: \"5px\" }} />\n            Dark Mode\n          </Button>\n          <Layout>\n            <Component {...pageProps} />\n          </Layout>\n        </>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}